# Using collection's Counter

# Time complexity: O(n)
# Space complexity: O(n) 

class Solution(object): 
    from collections import Counter
    
    def majorityElement(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        n = len(nums)
        c = Counter(nums).most_common(1)
        if c[0][1] > n // 2:
            return c[0][0]
        else:
            return None
            
# Using sort

# Time complexity: O(nlogn)
# Space complexity: O(1)

class Solution(object):
    from collections import Counter
    
    def majorityElement(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        
        nums.sort()
        return nums[len(nums)//2]

# Using Boyer-Moore Voting Algorithm

# Time complexity: O(n)
# Space complexity: O(1)

class Solution(object):
    from collections import Counter
    
    def majorityElement(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        count = 0
        candidate = None
        for num in nums:
            if count == 0:
                candidate = num
            count += (1 if num == candidate else -1)
        return candidate
            
            
